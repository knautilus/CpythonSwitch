diff --git a/Include/pyport.h b/Include/pyport.h
index 4bd4eb4751b..668a58223ab 100644
--- a/Include/pyport.h
+++ b/Include/pyport.h
@@ -838,7 +838,7 @@ extern _invalid_parameter_handler _Py_silent_invalid_parameter_handler;
 #  error "Py_TRACE_REFS ABI is not compatible with release and debug ABI"
 #endif
 
-#if defined(__ANDROID__) || defined(__VXWORKS__)
+#if defined(__ANDROID__) || defined(__VXWORKS__) || defined(__SWITCH__)
    /* Ignore the locale encoding: force UTF-8 */
 #  define _Py_FORCE_UTF8_LOCALE
 #endif
diff --git a/Lib/posixpath.py b/Lib/posixpath.py
index af2814bdb05..1119d8010f5 100644
--- a/Lib/posixpath.py
+++ b/Lib/posixpath.py
@@ -59,6 +59,9 @@ def normcase(s):
 
 def isabs(s):
     """Test whether a path is absolute"""
+    if sys.platform == 'horizon':
+        i = s.find('/', 0)
+        return (i != -1 and i != 0) and s[i - 1] == ':'
     s = os.fspath(s)
     sep = _get_sep(s)
     return s.startswith(sep)
@@ -86,6 +89,10 @@ def join(a, *p):
                 path += b
             else:
                 path += sep + b
+        if sys.platform == 'horizon':
+            i = b.find('/', 0)
+            if (i != -1 and i != 0) and b[i - 1] == ':':
+                path = b            
     except (TypeError, AttributeError, BytesWarning):
         genericpath._check_arg_types('join', a, *p)
         raise
@@ -366,7 +373,10 @@ def normpath(path):
     comps = new_comps
     path = sep.join(comps)
     if initial_slashes:
-        path = sep*initial_slashes + path
+        if sys.platform == 'horizon':
+            path = 'sdmc:/' + path
+        else:
+            path = sep*initial_slashes + path
     return path or dot
 
 
@@ -405,8 +415,13 @@ def _joinrealpath(path, rest, seen):
         pardir = '..'
 
     if isabs(rest):
-        rest = rest[1:]
-        path = sep
+        i = rest.find('/', 0)
+        if (sys.platform == 'horizon') and (i != -1 and i != 0) and rest[i - 1] == ':':
+            path = rest[:i + 1]
+            rest = rest[i + 1:]
+        else:
+            rest = rest[1:]
+            path = sep
 
     while rest:
         name, _, rest = rest.partition(sep)
diff --git a/Modules/Setup b/Modules/Setup
index 02cfb67518d..980c738048d 100644
--- a/Modules/Setup
+++ b/Modules/Setup
@@ -103,8 +103,8 @@ PYTHONPATH=$(COREPYTHONPATH)
 
 posix -DPy_BUILD_CORE_BUILTIN -I$(srcdir)/Include/internal posixmodule.c # posix (UNIX) system calls
 errno errnomodule.c			# posix (UNIX) errno values
-pwd pwdmodule.c				# this is needed to find out the user's home dir
-					# if $HOME is not set
+#pwd pwdmodule.c				# this is needed to find out the user's home dir
+#					# if $HOME is not set
 _sre _sre.c				# Fredrik Lundh's new regular expressions
 _codecs _codecsmodule.c			# access to the builtin codecs and codec registry
 _weakref _weakref.c			# weak references
diff --git a/Modules/clinic/posixmodule.c.h b/Modules/clinic/posixmodule.c.h
index f5df5c3b907..9dadfd607cf 100644
--- a/Modules/clinic/posixmodule.c.h
+++ b/Modules/clinic/posixmodule.c.h
@@ -1851,6 +1851,8 @@ exit:
 
 #endif /* defined(HAVE_SYSTEM) && !defined(MS_WINDOWS) */
 
+#if defined(HAVE_UMASK)
+
 PyDoc_STRVAR(os_umask__doc__,
 "umask($module, mask, /)\n"
 "--\n"
@@ -1884,6 +1886,8 @@ exit:
     return return_value;
 }
 
+#endif /* defined(HAVE_UMASK) */
+
 PyDoc_STRVAR(os_unlink__doc__,
 "unlink($module, /, path, *, dir_fd=None)\n"
 "--\n"
@@ -9002,6 +9006,10 @@ exit:
     #define OS_SYSTEM_METHODDEF
 #endif /* !defined(OS_SYSTEM_METHODDEF) */
 
+#ifndef OS_UMASK_METHODDEF
+    #define OS_UMASK_METHODDEF
+#endif /* !defined(OS_UMASK_METHODDEF) */
+
 #ifndef OS_UNAME_METHODDEF
     #define OS_UNAME_METHODDEF
 #endif /* !defined(OS_UNAME_METHODDEF) */
diff --git a/Modules/posixmodule.c b/Modules/posixmodule.c
index f498d40e34c..36ec7f6ce6e 100644
--- a/Modules/posixmodule.c
+++ b/Modules/posixmodule.c
@@ -322,6 +322,7 @@ corresponding Unix manual entries for more information on calls.");
 #    define fsync _commit
 #  else
      /* Unix functions that the configure script doesn't check for */
+#    if !defined(__SWITCH__)
 #    ifndef __VXWORKS__
 #      define HAVE_EXECV      1
 #      define HAVE_FORK       1
@@ -340,6 +341,26 @@ corresponding Unix manual entries for more information on calls.");
 #    define HAVE_SYSTEM     1
 #    define HAVE_WAIT       1
 #    define HAVE_TTYNAME    1
+#    else
+#    ifdef HAVE_GETGROUPS
+#      undef HAVE_GETGROUPS
+#    endif
+#    ifdef HAVE_SETGROUPS
+#      undef HAVE_SETGROUPS
+#    endif
+#    ifdef HAVE_SYMLINK
+#      undef HAVE_SYMLINK
+#    endif
+#    ifdef HAVE_CHROOT
+#      undef HAVE_CHROOT
+#    endif
+#    ifdef HAVE_FDATASYNC
+#      undef HAVE_FDATASYNC
+#    endif
+#    ifdef HAVE_FCHDIR
+#      undef HAVE_FCHDIR
+#    endif
+#    endif  /* ! __SWITCH__ */
 #  endif  /* _MSC_VER */
 #endif  /* ! __WATCOMC__ || __QNX__ */
 
@@ -4878,6 +4899,7 @@ os_system_impl(PyObject *module, PyObject *command)
 #endif /* HAVE_SYSTEM */
 
 
+#ifdef HAVE_UMASK
 /*[clinic input]
 os.umask
 
@@ -4896,6 +4918,7 @@ os_umask_impl(PyObject *module, int mask)
         return posix_error();
     return PyLong_FromLong((long)i);
 }
+#endif /* HAVE_UMASK */
 
 #ifdef MS_WINDOWS
 
diff --git a/Modules/timemodule.c b/Modules/timemodule.c
index df59f2aac5a..c7c88f6feb6 100644
--- a/Modules/timemodule.c
+++ b/Modules/timemodule.c
@@ -45,6 +45,10 @@
 #define _Py_timezone _timezone
 #define _Py_daylight _daylight
 #define _Py_tzname _tzname
+#elif defined(__SWITCH__)
+#define _Py_timezone 0
+#define _Py_daylight 0
+#define _Py_tzname ((char*[]){"GMT", "UTC"}) /* XXX: dirty hack */
 #else
 #define _Py_timezone timezone
 #define _Py_daylight daylight
diff --git a/Python/bootstrap_hash.c b/Python/bootstrap_hash.c
index e189ce0d901..9fdc7a62ae2 100644
--- a/Python/bootstrap_hash.c
+++ b/Python/bootstrap_hash.c
@@ -16,6 +16,9 @@
 #  if defined(HAVE_SYS_RANDOM_H) && (defined(HAVE_GETRANDOM) || defined(HAVE_GETENTROPY))
 #    include <sys/random.h>
 #  endif
+#  ifdef __SWITCH__
+#    include <switch/kernel/random.h>
+#  endif
 #  if !defined(HAVE_GETRANDOM) && defined(HAVE_GETRANDOM_SYSCALL)
 #    include <sys/syscall.h>
 #  endif
@@ -517,6 +520,11 @@ pyurandom(void *buffer, Py_ssize_t size, int blocking, int raise)
     return win32_urandom((unsigned char *)buffer, size, raise);
 #else
 
+#ifdef __SWITCH__
+    randomGet(buffer, size);
+    return 0;
+#endif
+
 #if defined(PY_GETRANDOM) || defined(PY_GETENTROPY)
     if (HAVE_GETENTRYPY_GETRANDOM_RUNTIME) {
 #ifdef PY_GETRANDOM
diff --git a/Python/thread_pthread.h b/Python/thread_pthread.h
index 83974b4c0ca..e9ea9b1b2bb 100644
--- a/Python/thread_pthread.h
+++ b/Python/thread_pthread.h
@@ -329,7 +329,11 @@ PyThread_get_thread_ident(void)
     if (!initialized)
         PyThread_init_thread();
     threadid = pthread_self();
+#ifdef __SWITCH__
+    return (unsigned long) threadid - 1;
+#else
     return (unsigned long) threadid;
+#endif
 }
 
 #ifdef PY_HAVE_THREAD_NATIVE_ID
diff --git a/configure b/configure
index b7be60eaa37..74485d777a2 100755
--- a/configure
+++ b/configure
@@ -3317,8 +3317,11 @@ then
 		ac_sys_system=Cygwin
 		;;
 	*-*-vxworks*)
-	    ac_sys_system=VxWorks
-	    ;;
+		ac_sys_system=VxWorks
+		;;
+	aarch64-none-elf*)
+		ac_sys_system=Horizon
+		;;
 	*)
 		# for now, limit cross builds to known configurations
 		MACHDEP="unknown"
@@ -3369,6 +3372,9 @@ if test "$cross_compiling" = yes; then
 	*-*-vxworks*)
 		_host_cpu=$host_cpu
 		;;
+	aarch64-none-elf*)
+		_host_cpu=$host_cpu
+		;;
 	*)
 		# for now, limit cross builds to known configurations
 		MACHDEP="unknown"
